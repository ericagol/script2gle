#!/usr/bin/env python
# coding=utf-8
#
# GENERAL MODULES
from sys import argv
from subprocess import check_call
from re import search, sub, match
from os import remove, listdir, rename
from os.path import splitext, join
from numpy import floor
from time import time
# OWN MODULES
import glec
import s2gf
import s2gd
import s2gc
import s2gap

###########################
# USER ARGUMENTS ##########
###########################
devmode    = False # else-> cleanup temp folders
no_gleplot = False # does not compile GLE files
no_octave  = False # uses matlab instead of octave
no_tex     = True  # for quick graph
png_out    = False # output in png instead of pdf
png_resol  = ''
if len(argv)>2:
	for arg in argv[2:]:
		if   bool(match(r'-dev',arg)):
			devmode = True
		elif bool(match(r'-noplot|-nogle',arg)):
			no_gleplot = True
		elif bool(match(r'-nooct|-noct',arg)):
			no_octave = True
		elif bool(match(r'-png',arg)):
			png_out   = True
			png_resol = '300'
		elif bool(match(r'-tex',arg)):
			no_tex = False
		else:
			print 'Ignoring unrecognized arg.: <'+arg+'>'
#
# -----------------------------------------------------------------------------
#
rname  	   = argv[1]
fname,fext = splitext(rname)    # full name with directory + file extension
fext 	   = fext.lower()
fname2 	   = fname.split('/')
fname2 	   = fname2[-1] 		# only name of file
gname  	   = fname+'.gle'
s_tmp      = '%s%s_script_tmp'%(s2gd.tind,fname)
s2gd.sname = fname2
figlist    = []
#
# def of the appropriate script dictionary
if fext   == '.jl':
	s2gd.csd = s2gd.script_dict_JL
elif fext == '.r':
	s2gd.csd = s2gd.script_dict_R
elif fext == '.m':
	s2gd.csd = s2gd.script_dict_M
	if no_octave:
		s2gd.csd['caller'] = 'matlab -nodesktop -nosplash -noFigureWindows -r'
		s2gd.csd['scname'] = 'matlab'
#
s2gd.ignored+= r'|^\s*%s'%s2gd.csd['comment']
#
markers_dict = s2gd.markers_dict
markers_dict[s2gd.csd['append']] = s2gap.parse_append
allmarkers = [m[0] for m in markers_dict.items()]
#
# == MAIN BLOCK =================
# create temp script file which
# outputs data file for each plot
with open(rname,'r') as sf_orig:
	with open(s_tmp+fext,'w+') as sf_tmp:
		#
		# script lines > stack of lines to process
		script_stack = sf_orig.readlines()
		# setup a fig
		curfig 		 = s2gc.S2GFIG(1,no_tex)
		#
		while script_stack:
			#
			# sanitize by gathering multiline expressions (continuation line with '...')
			l,script_stack = s2gf.close_ellipsis(script_stack.pop(0),script_stack)
			#
			# ignore lines starting with (comment symbol, 'home','clear', ...)
			if s2gf.match_start(s2gd.ignored,l):
				continue
			#
			# get marker if any ('figure','plot',...)
			i,marker = 0,''
			while i<len(allmarkers) and not marker:
				marker = s2gf.match_start(allmarkers[i],l)
				i+=1
			if marker:
				marker = marker.group(1)
			else:
				sf_tmp.write(l)
				continue
			#
			# parse line after marker (call appropriate s2gap function)
			cf,l,ss = markers_dict[marker]( curfig,l,figlist=figlist,no_tex=no_tex,
											script=sf_tmp,scriptstack=script_stack )
			if cf: curfig = cf
			if ss: script_stack = ss
		# --------------------------------
		# if there remains a figure -> append it
		if curfig.cntr:
			figlist.append(curfig)
		#
		sf_tmp.write('\n%s\n'%s2gd.csd['exit'])
#
# -----------------------------------------------------------------------------
# COMPILATION
# > run script (matlab,octave,julia,...)
try:
	start = time()
	check_call('%s %s%s'%(s2gd.csd['caller'],s_tmp,fext),shell=True)
	delta = time()-start
	print 'Calling script :: ',delta
except Exception, e:
	print e
#
# > (GLE) compile figs
if not no_gleplot:
	start = time()
	if png_out:
		for f in figlist:
			f.compile(png_resol)
	else:
		for f in figlist:
			f.compile()
	delta = time()-start
	print 'Calling+executing GLE :: ',delta
else: # just copy gle files
	for f in figlist:
		f.writefile()
#
# > cleanup temporary files
files = listdir('.')
for f in files:
	if f.startswith(s2gd.tind):
		if f.endswith('.pdf') or f.endswith('.png'):
			rename(f,f.strip(s2gd.tind))
		else:
			if not devmode: remove(f)
